	.TITLE	DELQA - DELQA logic
	.IDENT	/x01.00/

	.NLIST	BIN
;	.NLIST	ME
;	.NLIST	MEX
;	.NLIST	BEX

	.SBTTL	Definitions
	 .SBTTL	 Memory map and registers
;===========================================================================
; Memory addresses
;---------------------------------------------------------------------------
; External bus access
; 174456 - CSR
; 174454 - VAR
; 174450 - RBDL
; 174444 - TBDL
; 174440 - Base address
;
; Internal bus access
; 160000 - 167777 ROM
; 024000 - 024012 BDL block
; 024020 - 024036 DMA registers
; 024040 - 024056 Ethernet registers
; 020000 - 023777 Transmit buffer
; 010000 - 017777 Receive buffer
; 000000 - 007777 RAM with control program
;
;---------------------------------------------------------------------------
; Register definitions
;---------------------------------------------------------------------------
; External registers
;
LQABAS	= 24100	    ; Base address
LQARLL	= LQABAS+4  ; Rx BD low ordera ddress bis
LQARLH	= LQABAS+6  ; Rx BDL high order address bits
LQATLL	= LQABAS+10 ; Tx BDL low order address bits
LQATLH	= LQABAS+12 ; Tx BDL high order address bits
LQAVAR	= LQABAS+14 ; Vector Address Register
LQACSR	= LQABAS+16 ; Control and Status Register
;
; Internal register
;
RAMTOP	= 010000    ; Upper program limit
;
;---Buffers----
RXBUF	= 10000	    ; Receive buffer address
RXBSIZ	= 4000	    ; Size of buffer (words)
TXBUF	= 20000	    ; Transmit buffer address
TXBSIZ	= 2000	    ; Size of buffer (words)
;
;----BD ROM----
BDROM	= 160000    ; BD ROM address
BDRSIZ	= 10000	    ; BD ROM size
;
;-----BDL------
BDLADR	= 24000	    ; BDL buffer address
BDLSTW	= BDLADR+8. ;
;
;-----DMA------
DMAOP 	= 24020	    ; DMA operation/status
DMACNT	= 24022	    ; DMA words counter (2's compl.)
DMALAD	= 24024	    ; Local buffer address (offset)
DMAHLA	= 24026	    ; Low bits host memory address
DMAHHA	= 24030     ; High bits host memory address
DMATIM 	= 24032	    ; DMA operation timeout timer
;
;---Ethernet---
ECTST	= 24040	    ; Ethernet control/status bits
; *** read operation ***
; lbyte - {2'b0, bdl_h, setup, extmode, intemode, intmode, rxmode}
; hbyte - {1'b0, rxrdy, txdone, crs_err, mdc_err, e_txer, rx_err, rx_crc_err};
; *** write operation ***
; lbyte - {2'b0, bdl_h, setup, 4'b0}
ECNTB	= 24042     ; Bytes counter for transmit/receive operations
; write - transmit; read - receive
EMDVAL	= 24044     ; Ethernet MD input/output value
EMDCTR	= 24046     ; Ethernet MD control/status
; Write operation bits (control)
;  6:   1/0 - write/read
;  5:   1 - start
;  4:0  reg. address
; Read operation bits (status)
;  7:   1/0 - ready/busy
;  6,5:	speed (10-1000; 01-100; 00-10; 11-reserved)
;  4:   duplex (1-full; 0-half)
;  3:   reserved (0)
;  2:   1-MDI crossover; 0-MDI
;  1:   receiver (1-ready; 0-not ready)
;  0:   link (1-yes; 0-no)
;
EGMOD	= 24050
; read  - {bdmode, 8'b0, promis, mcast, rxa_eth, txa_eth, led, led, led}
; write - {8'b0, santm_reset, promis, mcast, rxa_eth, txa_eth, led, led, led}
;
	 .SBTTL	 Bit definitions
;===========================================================================
; General bit definitions
;---------------------------------------------------------------------------
BT.15	= 100000
BT.14	= 040000
BT.13	= 020000
BT.12	= 010000
BT.11	= 004000
BT.10	= 002000
BT.09	= 001000
BT.08	= 000400
BT.07	= 000200
BT.06	= 000100
BT.05	= 000040
BT.04	= 000020
BT.03	= 000010
BT.02	= 000004
BT.01	= 000002
BT.00	= 000001
;---------------------------------------------------------------------------
;  CSR bit definitions
CS.RI	= BT.15	; Receive interrupt request
CS.SE	= BT.10	; Sanity timer
CS.EL	= BT.09	; External loopback
CS.IL	= BT.08	; Internal loopback
CS.XI	= BT.07	; Transmit interrupt request
CS.IE	= BT.06	; Interrupt enable
CS.RL	= BT.05	; Receive List Invalid/Empty
CS.XL	= BT.04	; Transmit List Invalid/Empty
CS.BD	= BT.03	; Boot/Diagnostic ROM load
CS.NI	= BT.02	; Nonexistance-memory timeout Interrupt
CS.SR	= BT.01	; Software reset
CS.RE	= BT.00	; Receiver enable
;---------------------------------------------------------------------------
; VAR bit definitions
VR.MS	= BT.15	; Mode select
VR.OS	= BT.14	; Options switch
VR.RS	= BT.13	; Request to execute self-test
VR.S3	= BT.12	;
VR.S2	= BT.11	; Self-test status
VR.S1	= BT.10	;
VR.ID	= BT.00 ; Identity test bit
;---------------------------------------------------------------------------
; Address descriptor bits
BDES	= 2
AD.H	= BT.06	; High byte (beginning)
AD.L	= BT.07	; Low byte (termination)
AD.S	= BT.12	; Setup package indication
AD.E	= BT.13	; End of message
AD.C	= BT.14	; Chain address bit
AD.V	= BT.15	; Valid bit
INVLD	= 0
;---------------------------------------------------------------------------
; Twos complement of buffer size in words.
BSIZ	= 6
;
; Used and not last data segment
UNLST	= 140000
;---------------------------------------------------------------------------
; Bits defined for Transmit status word #1
TS.1GE	= BT.14	; indicates an error
TS.1CE	= BT.12	; indicates loss of carrier
TS.1ES	= BT.10	; indicates that the sanity timer was ...
		; ... enabled via switch S4 at powerup
TS.1AE	= BT.09	; indicates that the transmission was ...
		; ... aborted due to excessive collisions
;
; Bits defined for Receive status word #1
RS.1GE	= BT.14	; indicates an error
RS.1ES	= BT.13	; indicates a looped back Setup or ...
		; ... External Loopback packet
RS.1RE	= BT.11	; indicates that the internal loopback ...
		; ... operation was unsuccessful
RS.1BL	= BT.08!BT.09!BT.10 ; high order 3 bits of ...
			    ; ... receive byte length of packet
RS.1FE	= BT.02	; indicates a framing alignment error
RS.1CE	= BT.01	; indicates that a CRC error has been detected
;
; Bits defined for Receive status word #2
RS.2BL	= 377	; low order 8 bits of receive...
		; ...byte length of packet
;---------------------------------------------------------------------------
; Bits defined for DMAOP
DM.RDY	= BT.07	; Operation is completed
DM.NXM	= BT.06	; NMX error
DM.WRO	= BT.01	; DMA write operation
DM.RDO	= BT.00	; DMA read operation
RX.BFS	= BT.02	; Select receive buffer
TX.BFS	= BT.03	; Select transmit buffer
;---------------------------------------------------------------------------
; Bits defined for various errors
TX.ERR	= BT.00	; Transmit error
RX.ERR	= BT.01	; Receive error
NX.ERR	= BT.07	; NXM error
PH.ERR	= BT.06	; Phy error
;---------------------------------------------------------------------------
; Bits defined for Ethernet ECTST register
ET.RDD	= BT.07	; Receive operation has been completed
ET.TRD	= BT.06	; Ready to transmit
ET.SKB	= BT.05	; Skip byte
ET.STP	= BT.04	; Setup packet
ET.EXL	= BT.03	; External loop mode
ET.IEL	= BT.02	; Internal-external loop mode
ET.INL	= BT.01	; Internal loop mode
ET.REN	= BT.00	; Receiver is enabled
ET.RDY	= BT.14	; Packet has been received
ET.TXD	= BT.13	; Transmit operation has been completed
ER.CR	= BT.12	; Loss of carrier error
ER.MDR	= BT.11	; MDC error
ER.TXR	= BT.10	; Transmit error
ER.RDR	= BT.09	; Receive error
ER.CRR	= BT.08	; Receive CRC error
;---------------------------------------------------------------------------
; Bits defined for EGMOD
BD.ROM	= BT.15	; Load BDROM
ST.RST	= BT.07	; Sanity timer reset
ET.PRM	= BT.06	; Promiscuous mode
ET.MCT	= BT.05	; Multicast mode
EA.RXB	= BT.04	; Ethernet address bus to RXBUF
EA.TXB	= BT.03	; Ethernet address bus to TXBUF
EA.LED	= BT.00!BT.01!BT.02 ; LED bits
EA.LD1	= BT.00
EA.LD2	= BT.01
EA.LD3	= BT.02
;---------------------------------------------------------------------------
; Bits defined for MDC ops
MD.RDY	= BT.15	; Ready bit
MD.WR	= BT.06	; Write/read bit
MD.OP	= BT.05	; Start operation
MD.REG	= 37	; Register bits
MD.NRM	= 20500	; Initial parameters: 100 Mb, full duplex, no autoneg.
;
	.SBTTL	 Macro definition
;===========================================================================
; Macro definition
;
	.MACRO	IV, OFFSET, ADR
	.	= OFFSET
	.IF	NB, <ADR>
		.WORD	ADR
	.IFF
	.WORD	START
	.ENDC
	.WORD	340		; PS=340
	.ENDM
;
	.SBTTL	Interrupt vectors table
;---------------------------------------------------------------------------
; Generate interrupt vectors table
;
	.ASECT
	. = 0
	IV	0
	IV	4
	IV	10
	IV	14
	IV	20
	IV	24
	IV	30
	IV	34
	IV	40
	IV	44
	IV	50
	IV	54
	IV	60
	IV	64
	IV	70
	IV	74
	IV	100, TMRIRQ	; 100 Timer 50Hz
;
	.SBTTL	Main routines
	 .SBTTL	 Start point (initial settings)
;===========================================================================
; Start
;
START:
	MOV	#RAMTOP, SP	; SP is on the top
;
; Initial settings
;
	BIS	#1, @#LQABAS	; Block external access to the bus
	MTPS	#0		; Enable interrupt processing
	MOV	#BDLADR, R1	; Initial BDL local address to R1
	MOV	#DMAOP, R2	; DMAOP address to R2
	MOV	#LQACSR, R3	; LQACSR address to R3
	MOV	#177777, @R1	; Init first BDL word
; Init DMA registers
	MOV	R2, R4		; Starting regs. address
	MOV	#5, R5		; Number of regs.
1$:	CLR	(R4)+		; Init reg.
	SOB	R5, 1$		; Loop
; Init ethernet registers
	MOV	#ECTST, R4	; Starting regs. address
	MOV	#5, R5		; Number of regs.
2$:	CLR	(R4)+		; Init reg.
	SOB	R5, 2$		; Loop
; Init ethernet address mux control
	MOV	#30, @#EGMOD	; Set EA.RXB!EA.TXB
; Init sanity timer counters, LEDs, promisc. and mcast bits
	MOVB	#120, SETUPB	; Initial control byte value
	CALL	SPACK		; Make initial values
	CALL	SNTRES		; Reset sanity timer
; Clear timer counters
	MOV	#TTICK, R4	; Starting regs. address
	MOV	#TCNT, R5	; Number of regs.
4$:	CLRB	(R4)+		; Init reg.
	SOB	R5, 4$		; Loop
; Init MAC address table
	MOV	#MACTAB, R4	; Initial address of the table
	MOV	#84., R5	; Elements number
5$:	CLRB	(R4)+		; Clear ...
	SOB	R5, 5$		; ... all
; Init Ethernet transceiver
	CALL	MDCINI		; Init ethernet transceiver
	BCC	10$
	HALT			; !!! Error !!!
;
10$:	BIC	#1, @#LQABAS	; Unblock external access to the bus
;
	 .SBTTL	 Main loop
;---------------------------------------------------------------------------
; Main loop
;
MLOOP:	BIT	#CS.XL, @R3	; Check XL-bit
	BNE	1$		; If not ready - continue
	CALL	TXP		; Else - call transmit operation
1$:	BIT	#CS.RL, @R3	; Check RL-bit
	BNE	2$		; If not ready - continue
	BIT	#ET.RDY,@#ECTST	; Is there new data packet?
	BEQ	2$		; No - continue
	CALL	RXP		; Else - call receive operation
	BR	MLOOP
2$:	TST	@#EGMOD		; Ready to load BD ROM?
	BPL	3$		; No - continue
	CALL	PBDROM		; Yes - let's do it
3$:	BIT	#VR.RS,@#LQAVAR	; Check RS-bit
	BEQ	4$		; Not set - return
	CALL	TSTMOD		; Run tests if requested
4$:	BR	MLOOP		; Loop
;
	 .SBTTL	 Transmit operation
;===========================================================================
;
TXP:
	BIS	#1, @#EGMOD	; Set indication
	MOV	@#LQATLL, BDLL	; Get initial Tx BDL low order address bits
	MOV	@#LQATLH, BDLH	; Get initial Tx BDL high order address bits
;
; Get first/next BDL block data
TXL$:	MOV	BDLL, @#DMAHLA	; Set to DMA address (low order bits)
	MOV	BDLH, @#DMAHHA	; Set DMA address (high order bits)
	CALL	GETBDL		; Get BDL data
	BCC	1$
	JMP	28$		; If error - br to error proc.
;
; Process V-bit
1$:	BIT	#AD.V, 2(R1)	; Check valid bit
	BNE	2$		; There is no V-bit - return
	BIS	#<CS.XL!CS.XI>, @R3 ; Set XL-bit in the CSR
;	BIS	#CS.XI, @R3	; Set XI-bit in the CSR
	JMP	32$
;
; DMA transfer
2$:	MOV	#TXBUF,@#DMALAD	; Initial local address to DMA reg
	BIS	#TX.BFS,@R2	; Select transmit buffer
	CALL	DMASWR		; DMA write operation
	BIC	#TX.BFS,@R2	; Deselect transmit buffer
	BCS	28$		; Got data with error, br to finish
;
; Calculate number of bytes for transmition
	MOV	WCOUNT, R4	; Number of words to R4
	ASL	R4		; Convert to number of bytes
	BIT	#AD.L, 2(R1)	; Check for L-bit?
	BEQ	4$		; No L-bit - continue
	INC	R4		; Installed L-bit - decrease value
4$:	BIT	#AD.H, 2(R1)	; Check for H-bit?
	BEQ	6$		; No H-bit - continue
	INC	R4		; Installed H-bit - decrease value
	BIS	#ET.SKB,@#ECTST	; Set BDL-H bit in the emode register
6$:	MOV	R4, @#ECNTB	; Store byte count in the register.
	MOV	R4, BCOUNT	; Save copy
	CLR	STW1		; Init first transmit word
	CLR	STW2		; Init second transmit word
;
; Check and process S-bit
	BIT	#AD.S, 2(R1)	; Is the S-bit set?
	BNE	8$		; Yes - br to S-bit processing
	BIC	#ET.STP,@#ECTST	; No - clear S-bit in the emode register ...
	BR	10$		; ... and br to continue
8$:	BIS	#ET.STP,@#ECTST	; Set S-bit in the emode register, ...
;	MOV	BCOUNT, R4	; Get buffer's byte count
	NEG	R4		; 2-s complement
	MOVB	R4, SETUPB	; Save copy to variable
	CALL	SPACK		; Rewrite MAC address table
	MOV	#20014, STW1	; Prepare setup packet ...
	MOV	#4140, STW2	; ... status words
;
; E-bit
10$:	BIT	#AD.E, 2(R1)	; Execute the packet?
	BNE	20$		; Yes - transmit data
	BIS	#<AD.V!AD.C>,STW1 ; Set bits in the 1-st status word
	CALL	STWPR		; Send status words to host
	BCS	28$		; Carry is set - NXM error
	BR	26$		; Next BDL
;
; Transmit frame data
20$:	CALL	SNTRES		; Reset sanity timer
	BIS	#ET.TRD,@#ECTST	; Set "ready-to-transmit" bit
22$:	BIT	#<ET.TXD!ER.TXR>,@#ECTST ; Transmitted or error?
	BEQ	22$		; Not yet, loop
;
; Error checking
	BIC	#ET.TRD,@#ECTST	; Clear "ready-to-transmit" bit
	BIT	#ER.TXR,@#ECTST	; Got an error?
	BEQ	24$
	BIS	#<TS.1GE!TS.1CE!TS.1AE>,STW1 ; Set error bits
	BISB	#TX.ERR, ERRFLG	; Set error flag
;
; Send status words
24$:	CALL	STWPR		; Send status words to host
	BCS	28$		; Carry is set - NXM error
;	BIS	#CS.XI, @R3	; Set XI-bit in the CSR
;	BIS	#CS.XL, @R3	; Set XL-bit in the CSR
;
; Calculate next BDL address
26$:	ADD	#12., BDLL	; 6 words offset, ...
	ADC	BDLH		; ... add carry bit ...
	JMP	TXL$		; ... and loop
;
; Carry is set, NXM error.
28$:	BISB	#<TX.ERR!NX.ERR>,ERRFLG	; Set error flags
	BIS	#<CS.NI!CS.XL!CS.RL!CS.XI>,@R3 ; Set NI-bit in the CSR
;
; Return
32$:	BIC	#1, @#EGMOD	; Clear indication
	RETURN
;
	 .SBTTL	 Receive operation
;===========================================================================
;
RXP:
	BIS	#1, @#EGMOD	; Set indication
;
; Compare MAC addresses
;	BIT	#ET.PRM,@#SCTRLB
;	BEQ	1$
;	CALL	CMPMAC
;	BCC	1$
;	BIS	#ET.RDD,@#ECTST	; Else - set "receive-done" bit
;	BIC	#1, @#EGMOD	; Clear indication
;	RETURN
;
;	MOV	@#ECNTB, RBCNT	; Get ethernet byte count
	MOV	@#ECTST, RECTST	; Get ethernet status
	MOV	@#LQARLL, BDLL	; Get initial Rx BDL low order address bits
	MOV	@#LQARLH, BDLH	; Get initial Rx BDL high order address bits
	MOV	#RXBUF, DATADR	; Start at the beginning of the RXBUF
;
; Calculate number of words
	MOV	@#ECNTB, R4	; Get number of received bytes
	BNE	4$		; Not zero - continue
	BISB	#RX.ERR, ERRFLG	; Zero - set error flag, ...
	BIS	#ET.RDD,@#ECTST	; ... set "receive-done" bit and ...
	JMP	RXF$		; ... jump to finish
4$:	MOV	R4, DATBCN	; Data set size in bytes
	BIT	#BT.00, R4	; Is it even?
	BEQ	5$		; Yes - continue
	INC	R4		; No - make it even
5$:	ASR	R4		; Convert to word number
	MOV	R4, DATWCN	; Data set size in words
;
; Get first/next BDL block data
RXL$:	MOV	BDLL, @#DMAHLA	; Set to DMA address (low order bits)
	MOV	BDLH, @#DMAHHA	; Set DMA address (high order bits)
	CALL	GETBDL		; Get BDL data
	BCS	100$		; If error - br to error proc.
;
; Process V-bit
	BIT	#AD.V, 2(R1)	; Check valid bit
	BNE	1$		; There is V-bit - continue
	BIS	#<CS.RL!CS.RI>,@R3 ; Set RL-bit in the CSR
	BR	RXF$		; There is no V-bit - return
;
; Calculate word count
1$:	MOV	DATWCN, R4	; Data size in words to R4
	BNE	2$		; If data size = 0 then ...
	BIS	#CS.RL, @R3	; ... set RL-bit in the CSR ...
	BR	RXF$		; ... and return
;
2$:	ADD	WCOUNT, R4	; Compare size of received data and ...
				; ... DMA data buffer size
	BLE	4$
;
; Size of received data is greater then DMA data buffer size
	MOV	R4, DATWCN	; Store size of the reminder for the futher loop(s)
	MOV	WCOUNT, R5	; Use WCOUNT for DMA operation ...
	MOV	R5, @#DMACNT	; ... and store int in the register
	ASL	R5		; Convert to byte count 2's compl.
	ADD	R5, DATBCN	; Correct remaining byte count
	NEG	R5		; 2's complement
	MOV	R5, BCOUNT	; Number of bytes in the DMA data block
	BR	7$
;
; Size of received data is less then (or equal to) DMA data buffer size
4$:	MOV	DATWCN, R5
	NEG	R5
	MOV	R5, @#DMACNT	; Set
	MOV	DATBCN, BCOUNT	;
	TST	R4		; DATWCN = 0?
	BEQ	7$		; Yes - br to DMA operation
	CLR	DATWCN		; No - just clear it
;
; DMA transfer
7$:	MOV	DATADR,@#DMALAD	; Initial local address to DMA reg
	BIS	#RX.BFS,@R2	; Select receive buffer
	CALL	DMASRD		; Start DMA operation
	BIC	#RX.BFS,@R2	; Deselect receive buffer
	BCS	100$		; Got error - br to finish
	MOV	@#DMALAD,DATADR	; Store next buffer address for futher use
;
; Prepare and send status words
	CLR	R4		; Init 1-st status word
	CLR	R5		; Init 2-nd status word
	TST	DATWCN		; Is this the last data set?
	BNE	9$		; No  - br to set "used" and not "last"
	BIS	#ET.RDD,@#ECTST	; yes - set "receive-done" bit ...
	BR	10$		; ... and br to final step
9$:	MOV	#UNLST, R4	; No - set "used" and not "last" ...
; Check errors
10$:	MOV	RECTST, R0	; Get status byte
	BIT	#<ER.CRR!ER.RDR>,R0 ; Did we get errors?
	BEQ	15$		; No - continue
	BIS	#RS.1GE, R5	; Yes - set error bit
	BIT	#ER.CRR, R0	; Did we get CRC error?
	BEQ	13$		; No - continue
	BIS	#RS.1CE, R5	; Yes - set error bit
13$:	BIS	R5, R4		; Save to 1-st status word
; Calculate number of bytes, store status words
15$:	MOV	BCOUNT, R5	; Get number of received bytes
	BIT	#<ET.STP!ET.IEL!ET.INL>,R0 ; Loop-packet?
	BNE	17$		; Yes - br to continue
	SUB	#60., R5	; No -  calc modified number of bytes
	BR	19$		;
17$:	BIS	#RS.1ES, R4	; Set loop-packet bit
19$:	MOVB	R5, STW2	; Save byte count value
	MOVB	R5, STW2+1	;
	BIC	#^C<RS.1BL>, R5	; Clear all except high bits
	BIS	R5, R4		; Set the bits to the 1-st word
	MOV	R4, STW1	; Store 1-st status word
	CALL	STWPR		; Send status words to host
	BCS	100$		; Carry is set - NXM error
;
; Calculate next BDL address
	ADD	#12., BDLL	; 6 words offset, ...
	ADC	BDLH		; ... add carry bit ...
	BR	RXL$		; ... and loop
;
; Carry is set NXM error
100$:	BISB	#<RX.ERR!NX.ERR>,ERRFLG	; Set error flags
	BIS	#<CS.NI!CS.XL!CS.RL!CS.XI>,@R3 ; Set NI-bit in the CSR
;
; Return
RXF$:	BIC	#1, @#EGMOD	; Clear indication
	RETURN
;
	 .SBTTL	 BD ROM operation
;===========================================================================
;
PBDROM:	BIS	#7, @#EGMOD	; Set indication
	BIS	#CS.RL, @R3	; Restore RL-bit in the CSR
;-----------------------------------------------
; Rewrite from ROM to RX buffer
	BIC	#EA.RXB,@#EGMOD	; RXBUF address to bus mode
	MOV	#BDROM, R4	; BD ROM address to R4
	MOV	#RXBUF, R5	; RX buffer address to R5
	MOV	#BDRSIZ, R0	; BD ROM size in words ...
	ASR	R0		; ... to R0
1$:	MOV	(R4)+, (R5)+	; Rewrite BD ROM data
	SOB	R0, 1$		; to RX buffer
	BIC	#CS.RL, @R3	; Inform RX buffer is ready
; Wait for the BD=0
2$:	BIT	#CS.BD, @R3
	BNE	2$
;-----------------------------------------------
; Start data transfer
	MOV	@#LQARLL, BDLL	; Get initial Rx BDL low order address bits
	MOV	@#LQARLH, BDLH	; Get initial Rx BDL high order address bits
	MOV	#RXBUF, DATADR	; Start at the beginning of the RXBUF
	MOV	#BDRSIZ, R5
	MOV	R5, DATBCN	; Data set size in words
	ASR	R5
	MOV	R5, DATWCN	; Data set size in bytes
;
; Get first/next BDL block data
PBDLC$:	MOV	BDLL, @#DMAHLA	; Set to DMA address (low order bits)
	MOV	BDLH, @#DMAHHA	; Set DMA address (high order bits)
	CALL	GETBDL		; Get BDL data
	BCS	100$		; If error - br to error proc.
;
; Process V-bit
	BIT	#AD.V, 2(R1)	; Check valid bit
	BNE	1$		; There is V-bit - continue
	BIS	#<CS.RL!CS.RI>,@R3 ; Set RL-bit in the CSR
	BR	PBDEX$		; There is no V-bit - return
;
; Calculate word count
1$:	MOV	DATWCN, R4	; Data size in words to R4
	BNE	3$		; If data size = 0 then ...
	BIS	#CS.RL, @R3	; ... set RL-bit in the CSR ...
	BR	PBDEX$		; ... and return
;
3$:	ADD	WCOUNT, R4	; Compare size of received data and ...
				; ... DMA data buffer size
	MOV	R4, DATWCN	; Store size of the reminder for the futher loop(s)
	BLT	7$		; Size of received data is smaller
;
; Size of received data is greater then (or equal to) DMA data buffer size
	MOV	WCOUNT, R5	; In this case we operate with ...
	MOV	R5, @#DMACNT	; ... DMA data buffer size
; Calc. number of bytes
	TST	R4		; DATWCN = 0?
	BNE	5$		; No - calculate bytes number
	MOV	DATBCN, BCOUNT	; Yes - store for status word operation ...
	BR	9$		; ... and br to DMA operation
5$:	ASL	R5		; Convert to byte count 2's compl.
	ADD	R5, DATBCN	; Correct remaining byte count
	NEG	R5		; 2's complement
	MOV	R5, BCOUNT	; Number of bytes in the DMA data block
	BR	9$		; Br to DMA operation
;
; Size of received data is less then DMA data buffer size
7$:	MOV	R4, @#DMACNT	; Set words number for DMA operation
	MOV	DATBCN, BCOUNT	; Set bytes number for status words operation
;
; DMA transfer
9$:	MOV	DATADR,@#DMALAD	; Initial local address to DMA reg
	BIS	#RX.BFS,@R2	; Select receive buffer
	CALL	DMASRD		; Start DMA operation
	BIC	#RX.BFS,@R2	; Deselect receive buffer
	BCS	100$		; Got error - br to finish
	MOV	@#DMALAD,DATADR	; Store next buffer address for futher use
;
; Prepare and send status words
	TST	DATWCN		; Is this the last data set?
	BLE	10$		; Yes - set normal status word bits
	MOV	#UNLST, R4	; No - set "used" and not "last" data set
	BR	12$		; Skip "receive-done" bit operation
10$:	MOV	#100000, R4	; Init 1-st status word
12$:	CLR	R5		; Init 2-nd status word
; Calculate number of bytes, store status words
	MOV	BCOUNT, R5	; Get number of transfered bytes
	MOVB	R5, STW2	; Save byte count value ...
	MOVB	R5, STW2+1	; ... to the 2-nd status word
	BIC	#^C<RS.1BL>, R5	; Clear all except high bits
	BIS	R5, R4		; Set the bits to the 1-st word
	MOV	R4, STW1	; Store 1-st status word
	CALL	STWPR		; Send status words to host
	BCS	100$		; Carry is set - NXM error
;
; Calculate next BDL address
	ADD	#12., BDLL	; 6 words offset, ...
	ADC	BDLH		; ... add carry bit ...
	BR	PBDLC$		; ... and loop
;-----------------------------------------------
; Carry is set NXM error
100$:	BISB	#NX.ERR, ERRFLG	; Set error flags
	BIS	#<CS.NI!CS.XL!CS.RL!CS.XI>,@R3 ; Set NI-bit in the CSR
;
; Return
PBDEX$:	BIS	#EA.RXB,@#EGMOD	; RXBUF address to ethernet mode
	BIC	#7, @#EGMOD	; Clear indication
	RETURN
;
	 .SBTTL	 Tests
;===========================================================================
; Run tests (if necessary)
; Don't know yet what to test.
;
TSTMOD:	BIC	#<VR.S3!VR.S2!VR.S1>,@#LQAVAR ; Clear test bits
	BIS	#1, @#LQABAS	; Block external bus access
	BIS	#EA.LED,@#EGMOD	; Set indication
; 5 sec delay
	MOVB	TSEC, R0
	ADD	#5, R0
	CMP	R0, #60.
	BMI	1$
	SUB	#60., R0
1$:	MOVB	R0, TWAIT
	CALL	MTST
	BCS	8$
;
2$:	CMPB	TSEC, TWAIT
	BNE	2$
;
8$:	MOV	@#EGMOD, R0	; Get EGMOD value
	BIC	#EA.LED, R0	; Clear led bits
	MOV	@#LQAVAR, R4	; Get LQAVAR value
	BIC	#^C<VR.S3!VR.S2!VR.S1>,R4 ; Clear all except ...
					  ; ... test bits
	SWAB	R4		; Shift test result ...
	ASH	#-2, R4		; .. bits to the right (LSB)
	BIS	R4, R0		; Switch on leds in accordance ...
	MOV	R0, @#EGMOD	; ... with test result bits
	BIC	#<VR.RS>,@#LQAVAR ; Test result is ready
	MOV	@#LQAVAR, R0
	BIC	#1, @#LQABAS	; Unblock external bus access
	BIT	#<VR.S3!VR.S2!VR.S1>,@#LQAVAR
	BEQ	10$
	HALT
10$:	RETURN
;
;-----------------------------------------------
; RX/TX memory test
;
MTST:	BIC	#EA.RXB,@#EGMOD	; Set bus mode for RXBUF
	BIC	#EA.TXB,@#EGMOD	; Set bus mode for TXBUF
	MOV	#RXBUF, R4
	MOV	#RXBSIZ, R5
	CALL	BFTST
	BCS	1$
	BCC	2$
	MOV	#TXBUF, R4
	MOV	#TXBSIZ, R5
	CALL	BFTST
	BCC	2$
1$:	BIS	#<VR.S3!VR.S2>,@#LQAVAR ; Set error bits
2$:	BIS	#EA.RXB,@#EGMOD	; Restore ethernet mode for RXBUF
	BIS	#EA.TXB,@#EGMOD	; Restore ethernet mode for TXBUF
	RETURN
;-----------------------------------------------
BFTST:	MOV	R1, -(SP)
	MOV	R2, -(SP)
	MOV	R3, -(SP)
	MOV	R4, R2
	MOV	R5, R0
	CLR	R1
	CLR	R3
1$:	MOV	R1, (R2)
	CMP	R1, (R2)+
	BEQ	2$
	INC	R3
2$:	INC	STW1
	SOB	R0, 1$
	MOV	R4, R2
	MOV	R5, R0
	MOV	#177777, R1
3$:	MOV	R1, (R2)
	CMP	R1, (R2)+
	BEQ	4$
	INC	R3
4$:	DEC	R1
	SOB	R0, 3$
	TST	R3
	BEQ	8$
	SEC
	BR	9$
8$:	CLC
9$:	MOV	(SP)+, R3
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	RETURN
;
	.SBTTL	Internal routines
	 .SBTTL	 BDL processing
;===========================================================================
;
GETBDL:	MOV	R1, @#DMALAD	; Initial local address to DMA reg
	CLRB	ERRFLG		; Clear error flags
	CLR	10(R1)
	CLR	12(R1)
	MOV	#-1, @#DMACNT	; Process 1 word
	CALL	DMASRD		; Start DMA read operation
	BCS	4$		; Return if error
	MOV	#-3, @#DMACNT	; Process 3 words
	CALL	DMASWR		; DMA write operation
	BCS	4$		; Return if error
;
; Process C-bit
	BIT	#AD.C, 2(R1)	; Check chain bit
	BEQ	2$		; No bit - continue
	MOV	2(R1), R4	; Get high order address bits
	BIC	#177700, R4	; Clear unused bits
	MOV	R4, BDLH	; Save copy of the high order address bits
	MOV	R4, @#DMAHHA	; Store high order address bits
	MOV	4(R1), BDLL	; Save copy of the low order address bits
	MOV	4(R1), @#DMAHLA	; Store low order address bits
	BR	GETBDL		; Continue from the beginning
;
; Normail operation
2$:	MOV	2(R1), @#DMAHHA	; Store high order address bits
	MOV	4(R1), @#DMAHLA	; Get low address bits
	MOV	6(R1), R4	; Get buffer's word count
	MOV	R4, @#DMACNT	; Store word count for futher DMA operations
	MOV	R4, WCOUNT	; Save copy
	CLC			; Normal return
4$:	RETURN
;
	 .SBTTL	 DMA processing
;===========================================================================
;
DMASRD:
	BIS	#DM.RDO,@R2	; Set read operation
	BR	DMAC$		; BR to main loop
DMASWR:
	BIS	#DM.WRO,@R2	; Set write operation
;
; Waiting for the DMA operation will be completed
DMAC$:	CLC			; Clear carry
1$:	BIT	#DM.RDY,@R2	; Ready?
	BEQ	1$		; Not yet - loop
	BIT	#DM.NXM,@R2	; NXM error?
	BEQ	2$		; No - normal exit
	SEC			; Yes - set carry
2$:	BIC	#<DM.RDO!DM.WRO>,@R2 ; Clear operation bits
	RETURN
;
	 .SBTTL	 Status words processing
;===========================================================================
;
STWPR:	MOV	STW1, 10(R1)	; First status word
	MOV	STW2, 12(R1)	; Second status word
	MOV	BDLL, R4	; Get low order address bits
	MOV	BDLH, R5	; Get high order address bits
	ADD	#8., R4		; Calculate memory address ...
	ADC	R5		; ... to store status words
	MOV	R4, @#DMAHLA	; Set low order address bits
	MOV	R5, @#DMAHHA	; Set high order address bits
	MOV	#BDLSTW,@#DMALAD ;
	MOV	#-2, @#DMACNT	; Process 2 words
	CALL	DMASRD		; Start DMA read operation
	RETURN
;
	 .SBTTL	 Setup packet processing
;===========================================================================
;
SPACK:	MOV	R1, -(SP)
	MOV	R2, -(SP)
	MOV	R3, -(SP)
;
	MOVB	SETUPB, R5	; Get the initial value
	MOV	R5, R4		; Save copy
	MOV	@#EGMOD, R1	; Get ether general register value
	BIC	#^C<EA.RXB!EA.TXB!EA.LED>,R1 ; Clear all except ...
				; ... ethernet address mux ...
				; ... control bits and led bits
; Promisc. and mcast bits
	BIC	#^C<ET.PRM!ET.MCT>,R4 ; Clear all except needed bits
	BIS	R4, R1		; Combine information in R1
; Turn off LED bits
	MOV	R5, R4		; Get copy of the setup byte
	ASH	#-2, R4		; Shift to the right position
	BIC	#^C<3>, R4	; Clear all except needed bits
	BEQ	2$		; No effect if 0
	BICB	LEDS(R4), R1	; Turn off correct LED
; Set register
2$:	MOV	R1, @#EGMOD	; Set the result in the register
;
; Set initial sanity timer value
	MOV	R5, R4
	BIC	#177600, R4	; Clear all except 6-0 bits
	ASH	#-3, R4		; Remove unused bits
	MOV	SNTIV(R4),SNTVAL ; Store initial value
;
	BIC	#177, R5	; Clear control bits
	BEQ	20$		; No MAC info - return
;
	MOV	#MACTAB, MTADR
	MOV	#TXBUF, R1
	MOV	#2, R5
10$:	MOV	#6, R4

12$:	MOV	MTADR, R2
	MOV	#3, R3
	MOV	(R1)+, R0
	SWAB	R0
	MOVB	R0, (R2)
14$:	MOV	(R1)+, R0
	ADD	#6, R2
	MOVB	R0, (R2)
	ADD	#6, R2
	SWAB	R0
	MOVB	R0, (R2)
	SOB	R3, 14$
;
	INC	MTADR
	SOB	R4, 12$
;
	INC	R2
	MOV	R2, MTADR
	ADD	#20, R1
	SOB	R5, 10$
;
20$:	MOV	(SP)+, R3
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	RETURN
;
	 .SBTTL	 Sanity timer reset
;===========================================================================
;
SNTRES:
	MOV	SNTVAL, SNTCV	; Set initial value
	CLRB	SNTCK
	RETURN
;
	 .SBTTL	 Compare MAC addresses
;===========================================================================
;
CMPMAC:
	MOV	R1, -(SP)
	MOV	R2, -(SP)
	MOV	R3, -(SP)
	MOV	#14., R5
	BIC	#EA.RXB,@#EGMOD	; Set bus mode for RXBUF
	MOV	#MACTAB, R2
	ADD	#78., R2	; Last MAC address in the MACTAB
1$:	MOV	#RXBUF, R4
	MOV	R2, R3
	CLR	R0		; Init success counter
	MOV	#6, R1
2$:	CMP	(R4)+, (R3)+
	BNE	3$
	INC	R0
	SOB	R1, 2$
	CMP	#6, R0
	BEQ	4$
3$:	SUB	#6, R2
	SOB	R5, 1$
	SEC
	BR	5$
4$:	CLC
5$:	BIS	#EA.RXB,@#EGMOD	; Restore ethernet mode for RXBUF
	MOV	(SP)+, R3
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	RETURN
;
	.SBTTL	 Init ethernet transceiver
;===========================================================================
;
MDCINI:	BIS	#EA.LED, @#EGMOD
	CALL	MDWAIT
	BCS	6$
1$:	MOV	#MD.NRM,@#EMDVAL ; Set initial parameters
	CLR	R0		; Register number 0
	CALL	MDCWR		; Write data
	BCS	6$
	BR	8$
2$:	CLR	R0		; Register number 0
	CALL	MDCRD		; Read data
	BCS	6$
3$:	MOV	@#EMDVAL, R0	; Get MDC value
	CMP	#MD.NRM, R0	; Compare actial and expected values
	BEQ	8$		; If equal - br to normal return
	SEC			; If not - set carry
6$:	BIC	#<EA.LD3!EA.LD2>,@#EGMOD ; Turn off/on ...
	BIS	#EA.LD1,@#EGMOD		 ; ... correct LEDs
	BIC	#<VR.S3!VR.S2>,@#LQAVAR ; Clear/set ...
	BIS	#VR.S1,@#LQAVAR	; ... correct bits
	BR	10$
8$:	CLC			; Clear carry (normal return)
10$:	RETURN

;---------------------------------------------------------------------------
; Read MDC value
; Parameter:
;    R0 - register number
;
MDCRD:	BICB	#^C<MD.REG>, R0
	BICB	#MD.WR, R0
	BR	MDCOP
;---------------------------------------------------------------------------
; Write MDC value
; Parameter:
;    R0 - register number
;
MDCWR:	BICB	#^C<MD.REG>, R0
	BISB	#MD.WR, R0
;---------------------------------------------------------------------------
; MDC operation
; Parameter:
;    R0 - control byte
;
MDCOP:	BISB	#MD.OP, R0	; Set start bit ...
	MOVB	R0, @#EMDCTR	; ... and start operation
	CALL	MDWAIT
	RETURN
;---------------------------------------------------------------------------
; Wait ready status. 1 sec timeout
;
MDWAIT:	MOVB	TTICK, R0	; Store current tick value
	ADD	#55, R0
	CMP	#60., R0
	BPL	1$
	SUB	#60., R0
1$:	TST	@#EMDCTR	; Is it ready?
	BMI	2$		; Yes - br to normal return
	CMPB	R0, TTICK	; Timeout?
	BNE	1$		; No - loop
	BISB	#PH.ERR, ERRFLG	; Yes - set error flag ...
	SEC			; ... and carry
	RETURN
2$:	CLC			; Clear carry
	RETURN
;
	.SBTTL	Timer interrupt handler
;===========================================================================
;
TMRIRQ:
;-----------------------------------------------
; Ticks
	INCB	TTICK		; Tics counter
	INCB	SNTCK
	CMPB	TTICK, #50.	; Got 50 tics?
	BNE	100$		; No - br to finish
	CLRB	TTICK		; Clear tics counter
;-----------------------------------------------
;  Seconds
	INCB	TSEC		; Increment seconds counter
	CMPB	TSEC, #60.	; Got 60 seconds?
	BNE	100$		; No - br to finish
	CLRB	TSEC		; Clear seconds counter
;-----------------------------------------------
; Minutes
	INCB	TMIN		; Increment minutes counter
	CMPB	TMIN,#60.	; Got 60 minutes?
	BNE	100$		; Not yet - br to RTI
	CLRB	TMIN		; Yes - clear minutes counter and ...
;-----------------------------------------------
; Process 5-ticks counter
100$:
	CMPB	SNTCK, #5
	BNE	110$
	CLRB	SNTCK
	INC	SNTCV
	BNE	110$
;-----------------------------------------------
; Sanity counter is equal to zero
	BISB	#ST.RST,@#EGMOD ; Generate BDCOK
;
110$:	RTI
;
	.SBTTL	Data section
;===========================================================================
;
MTADR:	.BLKW	1	; Address of the MACTAB entry
MACTAB:	.BLKB	84.	; Mac address table
DATADR:	.BLKW	1	; Data address offset
DATWCN:	.BLKW	1	; Current data size in words
DATBCN:	.BLKW	1	; Current data size in bytes
BCOUNT:	.BLKW	1	; Total data size in bytes
WCOUNT:	.BLKW	1	; DMA ops. data size (2's compl.)
RBCNT:	.BLKW	1	; Byte count copy
RECTST:	.BLKW	1	; Ether status copy
BDLH:	.BLKW	1	; BDL high address bits
BDLL:	.BLKW	1	; BDL low address bits
STW1:	.BLKW	1	; 1-st status word
STW2:	.BLKB	1	; 2-nd status word
	.BLKB	1
;-----------------------------------------------
; Sanity timer
SNTIV:	.WORD	-3	; -0.3 sec (instead of 0.25)
	.WORD	-10.	; -1 sec
	.WORD	-40.	; -4 sec
	.WORD	-160.	; -16 sec
	.WORD	-600.	; -1 min
	.WORD	-2400.	; -4 min
	.WORD	-9600.	; -16 min
	.WORD	-38400.	; -64 min
SNTVAL:	.BLKW	1	; Initial value
SNTCV:	.BLKW	1	; Current counter
SETUPB:	.BLKB	1	; Setup control byte copy
SNTCK:	.BLKB	1
;-----------------------------------------------
; LEDS converter
LEDS:	.BYTE	0	; Leds - 000
	.BYTE	1	; Leds - 001
	.BYTE	2	; Leds - 010
	.BYTE	4	; Leds - 100
;-----------------------------------------------
; Error flags
ERRFLG:	.BLKB	1
EMODCP:	.BLKB	1
;-----------------------------------------------
; Timer counters
TTICK:	.BLKB	1
TSEC:	.BLKB	1
TMIN:	.BLKB	1
TWAIT:	.BLKB	1
TCNT	= .-TTICK
	.EVEN
;-----------------------------------------------
	.END  0
